




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "ctf_mod_s2c_proxy.h"

namespace ctf_mod_s2c {


        
	bool Proxy::Snapshot ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const nan2::module::ctf_module::Snapshot & snapshot)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Snapshot;
__msg.Write(__msgid); 
	
__msg << snapshot;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Snapshot, (::Proud::RmiID)Rmi_Snapshot);
	}

	bool Proxy::Snapshot ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const nan2::module::ctf_module::Snapshot & snapshot)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Snapshot;
__msg.Write(__msgid); 
	
__msg << snapshot;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Snapshot, (::Proud::RmiID)Rmi_Snapshot);
	}
        
	bool Proxy::FlagCaptured ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & player_id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_FlagCaptured;
__msg.Write(__msgid); 
	
__msg << player_id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_FlagCaptured, (::Proud::RmiID)Rmi_FlagCaptured);
	}

	bool Proxy::FlagCaptured ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & player_id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_FlagCaptured;
__msg.Write(__msgid); 
	
__msg << player_id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_FlagCaptured, (::Proud::RmiID)Rmi_FlagCaptured);
	}
        
	bool Proxy::FlagDropped ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & player_id, const float & pos_x, const float & pos_y)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_FlagDropped;
__msg.Write(__msgid); 
	
__msg << player_id;
__msg << pos_x;
__msg << pos_y;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_FlagDropped, (::Proud::RmiID)Rmi_FlagDropped);
	}

	bool Proxy::FlagDropped ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & player_id, const float & pos_x, const float & pos_y)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_FlagDropped;
__msg.Write(__msgid); 
	
__msg << player_id;
__msg << pos_x;
__msg << pos_y;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_FlagDropped, (::Proud::RmiID)Rmi_FlagDropped);
	}
        
	bool Proxy::FlagReturned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & player_id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_FlagReturned;
__msg.Write(__msgid); 
	
__msg << player_id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_FlagReturned, (::Proud::RmiID)Rmi_FlagReturned);
	}

	bool Proxy::FlagReturned ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & player_id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_FlagReturned;
__msg.Write(__msgid); 
	
__msg << player_id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_FlagReturned, (::Proud::RmiID)Rmi_FlagReturned);
	}
        
	bool Proxy::Scored ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::HostID & player_id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Scored;
__msg.Write(__msgid); 
	
__msg << player_id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Scored, (::Proud::RmiID)Rmi_Scored);
	}

	bool Proxy::Scored ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::HostID & player_id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Scored;
__msg.Write(__msgid); 
	
__msg << player_id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Scored, (::Proud::RmiID)Rmi_Scored);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Snapshot =_PNT("Snapshot");
#else
const PNTCHAR* Proxy::RmiName_Snapshot =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_FlagCaptured =_PNT("FlagCaptured");
#else
const PNTCHAR* Proxy::RmiName_FlagCaptured =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_FlagDropped =_PNT("FlagDropped");
#else
const PNTCHAR* Proxy::RmiName_FlagDropped =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_FlagReturned =_PNT("FlagReturned");
#else
const PNTCHAR* Proxy::RmiName_FlagReturned =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Scored =_PNT("Scored");
#else
const PNTCHAR* Proxy::RmiName_Scored =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_Snapshot;

}



