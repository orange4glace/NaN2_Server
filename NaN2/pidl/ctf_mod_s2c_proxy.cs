




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace CTFModS2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Snapshot(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, nan2.module.CTFModule.Snapshot snapshot)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Snapshot;
		__msg.Write(__msgid);
		nan2.ProudMarshaler.Write(__msg, snapshot);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Snapshot, Common.Snapshot);
}

public bool Snapshot(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, nan2.module.CTFModule.Snapshot snapshot)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Snapshot;
__msg.Write(__msgid);
nan2.ProudMarshaler.Write(__msg, snapshot);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Snapshot, Common.Snapshot);
}
public bool FlagCaptured(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.FlagCaptured;
		__msg.Write(__msgid);
		nan2.ProudMarshaler.Write(__msg, player_id);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_FlagCaptured, Common.FlagCaptured);
}

public bool FlagCaptured(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.FlagCaptured;
__msg.Write(__msgid);
nan2.ProudMarshaler.Write(__msg, player_id);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_FlagCaptured, Common.FlagCaptured);
}
public bool FlagDropped(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id, float pos_x, float pos_y)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.FlagDropped;
		__msg.Write(__msgid);
		nan2.ProudMarshaler.Write(__msg, player_id);
		nan2.ProudMarshaler.Write(__msg, pos_x);
		nan2.ProudMarshaler.Write(__msg, pos_y);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_FlagDropped, Common.FlagDropped);
}

public bool FlagDropped(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id, float pos_x, float pos_y)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.FlagDropped;
__msg.Write(__msgid);
nan2.ProudMarshaler.Write(__msg, player_id);
nan2.ProudMarshaler.Write(__msg, pos_x);
nan2.ProudMarshaler.Write(__msg, pos_y);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_FlagDropped, Common.FlagDropped);
}
public bool FlagReturned(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.FlagReturned;
		__msg.Write(__msgid);
		nan2.ProudMarshaler.Write(__msg, player_id);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_FlagReturned, Common.FlagReturned);
}

public bool FlagReturned(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.FlagReturned;
__msg.Write(__msgid);
nan2.ProudMarshaler.Write(__msg, player_id);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_FlagReturned, Common.FlagReturned);
}
public bool Scored(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Scored;
		__msg.Write(__msgid);
		nan2.ProudMarshaler.Write(__msg, player_id);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Scored, Common.Scored);
}

public bool Scored(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Scored;
__msg.Write(__msgid);
nan2.ProudMarshaler.Write(__msg, player_id);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Scored, Common.Scored);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_Snapshot="Snapshot";
const string RmiName_FlagCaptured="FlagCaptured";
const string RmiName_FlagDropped="FlagDropped";
const string RmiName_FlagReturned="FlagReturned";
const string RmiName_Scored="Scored";
       
const string RmiName_First = RmiName_Snapshot;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_Snapshot="";
const string RmiName_FlagCaptured="";
const string RmiName_FlagDropped="";
const string RmiName_FlagReturned="";
const string RmiName_Scored="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

