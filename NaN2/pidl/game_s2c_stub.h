  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "game_s2c_common.h"

     
namespace GameS2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool PlayerSnapshot ( ::Proud::HostID, ::Proud::RmiContext& , const nan2::LocalCharacterSnapshot & , const std::vector<nan2::RemoteCharacterSnapshot> & )		{ 
			return false;
		} 

#define DECRMI_GameS2C_PlayerSnapshot bool PlayerSnapshot ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const nan2::LocalCharacterSnapshot & local_character_snapshot, const std::vector<nan2::RemoteCharacterSnapshot> & remote_character_snapshot) PN_OVERRIDE

#define DEFRMI_GameS2C_PlayerSnapshot(DerivedClass) bool DerivedClass::PlayerSnapshot ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const nan2::LocalCharacterSnapshot & local_character_snapshot, const std::vector<nan2::RemoteCharacterSnapshot> & remote_character_snapshot)
#define CALL_GameS2C_PlayerSnapshot PlayerSnapshot ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const nan2::LocalCharacterSnapshot & local_character_snapshot, const std::vector<nan2::RemoteCharacterSnapshot> & remote_character_snapshot)
#define PARAM_GameS2C_PlayerSnapshot ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const nan2::LocalCharacterSnapshot & local_character_snapshot, const std::vector<nan2::RemoteCharacterSnapshot> & remote_character_snapshot)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_PlayerSnapshot;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const nan2::LocalCharacterSnapshot & , const std::vector<nan2::RemoteCharacterSnapshot> & ) > PlayerSnapshot_Function;
		virtual bool PlayerSnapshot ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const nan2::LocalCharacterSnapshot & local_character_snapshot, const std::vector<nan2::RemoteCharacterSnapshot> & remote_character_snapshot) 
		{ 
			if (PlayerSnapshot_Function==nullptr) 
				return true; 
			return PlayerSnapshot_Function(remote,rmiContext, local_character_snapshot, remote_character_snapshot); 
		}

	};
#endif

}


