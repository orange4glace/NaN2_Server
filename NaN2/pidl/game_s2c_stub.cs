




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace GameS2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool PlayerSnapshotsDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, nan2.LocalCharacterSnapshot local_character_snapshot, System.Collections.Generic.List<nan2.RemoteCharacterSnapshot> remote_character_snapshot);  
		public PlayerSnapshotsDelegate PlayerSnapshots = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, nan2.LocalCharacterSnapshot local_character_snapshot, System.Collections.Generic.List<nan2.RemoteCharacterSnapshot> remote_character_snapshot)
		{ 
			return false;
		};
		public delegate bool JoinWorldDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Nettention.Proud.HostID> player_ids);  
		public JoinWorldDelegate JoinWorld = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Nettention.Proud.HostID> player_ids)
		{ 
			return false;
		};
		public delegate bool PlayerJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id);  
		public PlayerJoinDelegate PlayerJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
		{ 
			return false;
		};
		public delegate bool PlayerLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id);  
		public PlayerLeaveDelegate PlayerLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
		{ 
			return false;
		};
		public delegate bool SkillCastedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id, nan2.SkillCastSnapshot snapshot);  
		public SkillCastedDelegate SkillCasted = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id, nan2.SkillCastSnapshot snapshot)
		{ 
			return false;
		};
		public delegate bool CharacterSpawnedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id, UnityEngine.Vector2 position);  
		public CharacterSpawnedDelegate CharacterSpawned = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id, UnityEngine.Vector2 position)
		{ 
			return false;
		};
		public delegate bool CharacterDiedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id);  
		public CharacterDiedDelegate CharacterDied = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID player_id)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.PlayerSnapshots:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		nan2.LocalCharacterSnapshot local_character_snapshot; nan2.ProudMarshaler.Read(__msg,out local_character_snapshot);	
System.Collections.Generic.List<nan2.RemoteCharacterSnapshot> remote_character_snapshot; nan2.ProudMarshaler.Read(__msg,out remote_character_snapshot);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSnapshots);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=local_character_snapshot.ToString()+",";
parameterString+=remote_character_snapshot.ToString()+",";
			NotifyCallFromStub(Common.PlayerSnapshots, RmiName_PlayerSnapshots,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.PlayerSnapshots;
			summary.rmiName = RmiName_PlayerSnapshots;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=PlayerSnapshots (remote,ctx , local_character_snapshot, remote_character_snapshot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_PlayerSnapshots);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.PlayerSnapshots;
			summary.rmiName = RmiName_PlayerSnapshots;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.JoinWorld:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.Collections.Generic.List<Nettention.Proud.HostID> player_ids; nan2.ProudMarshaler.Read(__msg,out player_ids);	
core.PostCheckReadMessage(__msg, RmiName_JoinWorld);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=player_ids.ToString()+",";
			NotifyCallFromStub(Common.JoinWorld, RmiName_JoinWorld,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.JoinWorld;
			summary.rmiName = RmiName_JoinWorld;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=JoinWorld (remote,ctx , player_ids );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_JoinWorld);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.JoinWorld;
			summary.rmiName = RmiName_JoinWorld;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.PlayerJoin:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.HostID player_id; nan2.ProudMarshaler.Read(__msg,out player_id);	
core.PostCheckReadMessage(__msg, RmiName_PlayerJoin);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=player_id.ToString()+",";
			NotifyCallFromStub(Common.PlayerJoin, RmiName_PlayerJoin,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.PlayerJoin;
			summary.rmiName = RmiName_PlayerJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=PlayerJoin (remote,ctx , player_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_PlayerJoin);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.PlayerJoin;
			summary.rmiName = RmiName_PlayerJoin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.PlayerLeave:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.HostID player_id; nan2.ProudMarshaler.Read(__msg,out player_id);	
core.PostCheckReadMessage(__msg, RmiName_PlayerLeave);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=player_id.ToString()+",";
			NotifyCallFromStub(Common.PlayerLeave, RmiName_PlayerLeave,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.PlayerLeave;
			summary.rmiName = RmiName_PlayerLeave;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=PlayerLeave (remote,ctx , player_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_PlayerLeave);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.PlayerLeave;
			summary.rmiName = RmiName_PlayerLeave;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.SkillCasted:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.HostID player_id; nan2.ProudMarshaler.Read(__msg,out player_id);	
nan2.SkillCastSnapshot snapshot; nan2.ProudMarshaler.Read(__msg,out snapshot);	
core.PostCheckReadMessage(__msg, RmiName_SkillCasted);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=player_id.ToString()+",";
parameterString+=snapshot.ToString()+",";
			NotifyCallFromStub(Common.SkillCasted, RmiName_SkillCasted,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.SkillCasted;
			summary.rmiName = RmiName_SkillCasted;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=SkillCasted (remote,ctx , player_id, snapshot );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_SkillCasted);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.SkillCasted;
			summary.rmiName = RmiName_SkillCasted;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.CharacterSpawned:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.HostID player_id; nan2.ProudMarshaler.Read(__msg,out player_id);	
UnityEngine.Vector2 position; nan2.ProudMarshaler.Read(__msg,out position);	
core.PostCheckReadMessage(__msg, RmiName_CharacterSpawned);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=player_id.ToString()+",";
parameterString+=position.ToString()+",";
			NotifyCallFromStub(Common.CharacterSpawned, RmiName_CharacterSpawned,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.CharacterSpawned;
			summary.rmiName = RmiName_CharacterSpawned;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=CharacterSpawned (remote,ctx , player_id, position );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_CharacterSpawned);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.CharacterSpawned;
			summary.rmiName = RmiName_CharacterSpawned;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.CharacterDied:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		Nettention.Proud.HostID player_id; nan2.ProudMarshaler.Read(__msg,out player_id);	
core.PostCheckReadMessage(__msg, RmiName_CharacterDied);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=player_id.ToString()+",";
			NotifyCallFromStub(Common.CharacterDied, RmiName_CharacterDied,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.CharacterDied;
			summary.rmiName = RmiName_CharacterDied;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=CharacterDied (remote,ctx , player_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_CharacterDied);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.CharacterDied;
			summary.rmiName = RmiName_CharacterDied;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_PlayerSnapshots="PlayerSnapshots";
const string RmiName_JoinWorld="JoinWorld";
const string RmiName_PlayerJoin="PlayerJoin";
const string RmiName_PlayerLeave="PlayerLeave";
const string RmiName_SkillCasted="SkillCasted";
const string RmiName_CharacterSpawned="CharacterSpawned";
const string RmiName_CharacterDied="CharacterDied";
       
const string RmiName_First = RmiName_PlayerSnapshots;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_PlayerSnapshots="";
const string RmiName_JoinWorld="";
const string RmiName_PlayerJoin="";
const string RmiName_PlayerLeave="";
const string RmiName_SkillCasted="";
const string RmiName_CharacterSpawned="";
const string RmiName_CharacterDied="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

